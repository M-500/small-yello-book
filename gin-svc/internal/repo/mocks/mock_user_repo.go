// Code generated by MockGen. DO NOT EDIT.
// Source: gin-svc/internal/repo (interfaces: UserRepoInterface)
//
// Generated by this command:
//
//	mockgen -destination=../repo/mocks/mock_user_repo.go -package=mocks gin-svc/internal/repo UserRepoInterface
//

// Package mocks is a generated GoMock package.
package mocks

import (
	context "context"
	models "gin-svc/internal/models"
	reflect "reflect"

	gomock "go.uber.org/mock/gomock"
)

// MockUserRepoInterface is a mock of UserRepoInterface interface.
type MockUserRepoInterface struct {
	ctrl     *gomock.Controller
	recorder *MockUserRepoInterfaceMockRecorder
}

// MockUserRepoInterfaceMockRecorder is the mock recorder for MockUserRepoInterface.
type MockUserRepoInterfaceMockRecorder struct {
	mock *MockUserRepoInterface
}

// NewMockUserRepoInterface creates a new mock instance.
func NewMockUserRepoInterface(ctrl *gomock.Controller) *MockUserRepoInterface {
	mock := &MockUserRepoInterface{ctrl: ctrl}
	mock.recorder = &MockUserRepoInterfaceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockUserRepoInterface) EXPECT() *MockUserRepoInterfaceMockRecorder {
	return m.recorder
}

// CreateUser mocks base method.
func (m *MockUserRepoInterface) CreateUser(arg0 context.Context, arg1 *models.UserModel) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateUser", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// CreateUser indicates an expected call of CreateUser.
func (mr *MockUserRepoInterfaceMockRecorder) CreateUser(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateUser", reflect.TypeOf((*MockUserRepoInterface)(nil).CreateUser), arg0, arg1)
}

// DeleteUser mocks base method.
func (m *MockUserRepoInterface) DeleteUser(arg0 context.Context, arg1 *models.UserModel) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteUser", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteUser indicates an expected call of DeleteUser.
func (mr *MockUserRepoInterfaceMockRecorder) DeleteUser(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteUser", reflect.TypeOf((*MockUserRepoInterface)(nil).DeleteUser), arg0, arg1)
}

// FindByEmail mocks base method.
func (m *MockUserRepoInterface) FindByEmail(arg0 context.Context, arg1 string) (*models.UserModel, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindByEmail", arg0, arg1)
	ret0, _ := ret[0].(*models.UserModel)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindByEmail indicates an expected call of FindByEmail.
func (mr *MockUserRepoInterfaceMockRecorder) FindByEmail(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindByEmail", reflect.TypeOf((*MockUserRepoInterface)(nil).FindByEmail), arg0, arg1)
}

// FindByUserName mocks base method.
func (m *MockUserRepoInterface) FindByUserName(arg0 context.Context, arg1 string) (*models.UserModel, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindByUserName", arg0, arg1)
	ret0, _ := ret[0].(*models.UserModel)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindByUserName indicates an expected call of FindByUserName.
func (mr *MockUserRepoInterfaceMockRecorder) FindByUserName(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindByUserName", reflect.TypeOf((*MockUserRepoInterface)(nil).FindByUserName), arg0, arg1)
}

// UpsertUser mocks base method.
func (m *MockUserRepoInterface) UpsertUser(arg0 context.Context, arg1 *models.UserModel) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpsertUser", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpsertUser indicates an expected call of UpsertUser.
func (mr *MockUserRepoInterfaceMockRecorder) UpsertUser(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpsertUser", reflect.TypeOf((*MockUserRepoInterface)(nil).UpsertUser), arg0, arg1)
}

// Code generated by MockGen. DO NOT EDIT.
// Source: ./sys_role_repo.go
//
// Generated by this command:
//
//	mockgen -destination=../repo/mocks/mock_role_repo.go -package=mocks -source=./sys_role_repo.go RoleRepo
//

// Package mocks is a generated GoMock package.
package mocks

import (
	context "context"
	models "gin-svc/internal/models"
	reflect "reflect"

	gomock "go.uber.org/mock/gomock"
)

// MockRoleRepo is a mock of RoleRepo interface.
type MockRoleRepo struct {
	ctrl     *gomock.Controller
	recorder *MockRoleRepoMockRecorder
}

// MockRoleRepoMockRecorder is the mock recorder for MockRoleRepo.
type MockRoleRepoMockRecorder struct {
	mock *MockRoleRepo
}

// NewMockRoleRepo creates a new mock instance.
func NewMockRoleRepo(ctrl *gomock.Controller) *MockRoleRepo {
	mock := &MockRoleRepo{ctrl: ctrl}
	mock.recorder = &MockRoleRepoMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockRoleRepo) EXPECT() *MockRoleRepoMockRecorder {
	return m.recorder
}

// CheckPermissionIds mocks base method.
func (m *MockRoleRepo) CheckPermissionIds(ctx context.Context, perIds []int) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CheckPermissionIds", ctx, perIds)
	ret0, _ := ret[0].(error)
	return ret0
}

// CheckPermissionIds indicates an expected call of CheckPermissionIds.
func (mr *MockRoleRepoMockRecorder) CheckPermissionIds(ctx, perIds any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CheckPermissionIds", reflect.TypeOf((*MockRoleRepo)(nil).CheckPermissionIds), ctx, perIds)
}

// CreateRole mocks base method.
func (m *MockRoleRepo) CreateRole(ctx context.Context, role *models.SysRoleModel) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateRole", ctx, role)
	ret0, _ := ret[0].(error)
	return ret0
}

// CreateRole indicates an expected call of CreateRole.
func (mr *MockRoleRepoMockRecorder) CreateRole(ctx, role any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateRole", reflect.TypeOf((*MockRoleRepo)(nil).CreateRole), ctx, role)
}

// DeleteRole mocks base method.
func (m *MockRoleRepo) DeleteRole(ctx context.Context, id int) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteRole", ctx, id)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteRole indicates an expected call of DeleteRole.
func (mr *MockRoleRepoMockRecorder) DeleteRole(ctx, id any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteRole", reflect.TypeOf((*MockRoleRepo)(nil).DeleteRole), ctx, id)
}

// FindAllPermissionsByUserID mocks base method.
func (m *MockRoleRepo) FindAllPermissionsByUserID(ctx context.Context, uid int) ([]models.SysPermissionModel, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindAllPermissionsByUserID", ctx, uid)
	ret0, _ := ret[0].([]models.SysPermissionModel)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindAllPermissionsByUserID indicates an expected call of FindAllPermissionsByUserID.
func (mr *MockRoleRepoMockRecorder) FindAllPermissionsByUserID(ctx, uid any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindAllPermissionsByUserID", reflect.TypeOf((*MockRoleRepo)(nil).FindAllPermissionsByUserID), ctx, uid)
}

// FindAllRolesByUserID mocks base method.
func (m *MockRoleRepo) FindAllRolesByUserID(ctx context.Context, uid int) ([]models.SysRoleModel, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindAllRolesByUserID", ctx, uid)
	ret0, _ := ret[0].([]models.SysRoleModel)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindAllRolesByUserID indicates an expected call of FindAllRolesByUserID.
func (mr *MockRoleRepoMockRecorder) FindAllRolesByUserID(ctx, uid any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindAllRolesByUserID", reflect.TypeOf((*MockRoleRepo)(nil).FindAllRolesByUserID), ctx, uid)
}

// FindPermissionListByRoleId mocks base method.
func (m *MockRoleRepo) FindPermissionListByRoleId(ctx context.Context, roleId int) ([]models.SysPermissionModel, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindPermissionListByRoleId", ctx, roleId)
	ret0, _ := ret[0].([]models.SysPermissionModel)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindPermissionListByRoleId indicates an expected call of FindPermissionListByRoleId.
func (mr *MockRoleRepoMockRecorder) FindPermissionListByRoleId(ctx, roleId any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindPermissionListByRoleId", reflect.TypeOf((*MockRoleRepo)(nil).FindPermissionListByRoleId), ctx, roleId)
}

// GetRoleByID mocks base method.
func (m *MockRoleRepo) GetRoleByID(ctx context.Context, id int) (*models.SysRoleModel, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetRoleByID", ctx, id)
	ret0, _ := ret[0].(*models.SysRoleModel)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetRoleByID indicates an expected call of GetRoleByID.
func (mr *MockRoleRepoMockRecorder) GetRoleByID(ctx, id any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetRoleByID", reflect.TypeOf((*MockRoleRepo)(nil).GetRoleByID), ctx, id)
}

// ListRole mocks base method.
func (m *MockRoleRepo) ListRole(ctx context.Context, key string, page, pageSize int) ([]models.SysRoleModel, int64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListRole", ctx, key, page, pageSize)
	ret0, _ := ret[0].([]models.SysRoleModel)
	ret1, _ := ret[1].(int64)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// ListRole indicates an expected call of ListRole.
func (mr *MockRoleRepoMockRecorder) ListRole(ctx, key, page, pageSize any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListRole", reflect.TypeOf((*MockRoleRepo)(nil).ListRole), ctx, key, page, pageSize)
}

// UpdateRole mocks base method.
func (m *MockRoleRepo) UpdateRole(ctx context.Context, role *models.SysRoleModel, perIds []int) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateRole", ctx, role, perIds)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateRole indicates an expected call of UpdateRole.
func (mr *MockRoleRepoMockRecorder) UpdateRole(ctx, role, perIds any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateRole", reflect.TypeOf((*MockRoleRepo)(nil).UpdateRole), ctx, role, perIds)
}

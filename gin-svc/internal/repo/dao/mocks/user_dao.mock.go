// Code generated by MockGen. DO NOT EDIT.
// Source: ./user_dao.go
//
// Generated by this command:
//
//	mockgen -source=./user_dao.go -package=daomocks -destination=./mocks/user_dao.mock.go UserDao
//

// Package daomocks is a generated GoMock package.
package daomocks

import (
	context "context"
	models "gin-svc/internal/models"
	reflect "reflect"

	gomock "go.uber.org/mock/gomock"
)

// MockUserDao is a mock of UserDao interface.
type MockUserDao struct {
	ctrl     *gomock.Controller
	recorder *MockUserDaoMockRecorder
}

// MockUserDaoMockRecorder is the mock recorder for MockUserDao.
type MockUserDaoMockRecorder struct {
	mock *MockUserDao
}

// NewMockUserDao creates a new mock instance.
func NewMockUserDao(ctrl *gomock.Controller) *MockUserDao {
	mock := &MockUserDao{ctrl: ctrl}
	mock.recorder = &MockUserDaoMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockUserDao) EXPECT() *MockUserDaoMockRecorder {
	return m.recorder
}

// Delete mocks base method.
func (m *MockUserDao) Delete(ctx context.Context, id int) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Delete", ctx, id)
	ret0, _ := ret[0].(error)
	return ret0
}

// Delete indicates an expected call of Delete.
func (mr *MockUserDaoMockRecorder) Delete(ctx, id any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Delete", reflect.TypeOf((*MockUserDao)(nil).Delete), ctx, id)
}

// FindByEmail mocks base method.
func (m *MockUserDao) FindByEmail(ctx context.Context, email string) (*models.UserModel, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindByEmail", ctx, email)
	ret0, _ := ret[0].(*models.UserModel)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindByEmail indicates an expected call of FindByEmail.
func (mr *MockUserDaoMockRecorder) FindByEmail(ctx, email any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindByEmail", reflect.TypeOf((*MockUserDao)(nil).FindByEmail), ctx, email)
}

// FindByUserName mocks base method.
func (m *MockUserDao) FindByUserName(ctx context.Context, userName string) (*models.UserModel, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindByUserName", ctx, userName)
	ret0, _ := ret[0].(*models.UserModel)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindByUserName indicates an expected call of FindByUserName.
func (mr *MockUserDaoMockRecorder) FindByUserName(ctx, userName any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindByUserName", reflect.TypeOf((*MockUserDao)(nil).FindByUserName), ctx, userName)
}

// Upsert mocks base method.
func (m *MockUserDao) Upsert(ctx context.Context, user *models.UserModel, rid []int) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Upsert", ctx, user, rid)
	ret0, _ := ret[0].(error)
	return ret0
}

// Upsert indicates an expected call of Upsert.
func (mr *MockUserDaoMockRecorder) Upsert(ctx, user, rid any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Upsert", reflect.TypeOf((*MockUserDao)(nil).Upsert), ctx, user, rid)
}
